// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: video_service/video_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	VideoProcessingService_ProcessNewVideoRequest_FullMethodName = "/videoservice.VideoProcessingService/ProcessNewVideoRequest"
)

// VideoProcessingServiceClient is the client API for VideoProcessingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoProcessingServiceClient interface {
	ProcessNewVideoRequest(ctx context.Context, in *VideoInfo, opts ...grpc.CallOption) (*ProcessNewVideoResponse, error)
}

type videoProcessingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoProcessingServiceClient(cc grpc.ClientConnInterface) VideoProcessingServiceClient {
	return &videoProcessingServiceClient{cc}
}

func (c *videoProcessingServiceClient) ProcessNewVideoRequest(ctx context.Context, in *VideoInfo, opts ...grpc.CallOption) (*ProcessNewVideoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessNewVideoResponse)
	err := c.cc.Invoke(ctx, VideoProcessingService_ProcessNewVideoRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoProcessingServiceServer is the server API for VideoProcessingService service.
// All implementations must embed UnimplementedVideoProcessingServiceServer
// for forward compatibility
type VideoProcessingServiceServer interface {
	ProcessNewVideoRequest(context.Context, *VideoInfo) (*ProcessNewVideoResponse, error)
	mustEmbedUnimplementedVideoProcessingServiceServer()
}

// UnimplementedVideoProcessingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVideoProcessingServiceServer struct {
}

func (UnimplementedVideoProcessingServiceServer) ProcessNewVideoRequest(context.Context, *VideoInfo) (*ProcessNewVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessNewVideoRequest not implemented")
}
func (UnimplementedVideoProcessingServiceServer) mustEmbedUnimplementedVideoProcessingServiceServer() {
}

// UnsafeVideoProcessingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoProcessingServiceServer will
// result in compilation errors.
type UnsafeVideoProcessingServiceServer interface {
	mustEmbedUnimplementedVideoProcessingServiceServer()
}

func RegisterVideoProcessingServiceServer(s grpc.ServiceRegistrar, srv VideoProcessingServiceServer) {
	s.RegisterService(&VideoProcessingService_ServiceDesc, srv)
}

func _VideoProcessingService_ProcessNewVideoRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoProcessingServiceServer).ProcessNewVideoRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoProcessingService_ProcessNewVideoRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoProcessingServiceServer).ProcessNewVideoRequest(ctx, req.(*VideoInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoProcessingService_ServiceDesc is the grpc.ServiceDesc for VideoProcessingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoProcessingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "videoservice.VideoProcessingService",
	HandlerType: (*VideoProcessingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessNewVideoRequest",
			Handler:    _VideoProcessingService_ProcessNewVideoRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "video_service/video_service.proto",
}
